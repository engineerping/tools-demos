package com.example.anytest.a_sorting;

import java.util.Arrays;

/**
 * @author gongchengship@163.com
 * 打印 int 的 二进制值
 * 小贴士:
 * 与   :  &  :都为1的时候为1，其它的都为0.
 * 或   :  |  :其中一个为1，就为1.
 * 非   :  ~  :0 变 1; 1 变 0.
 * 异或 :   ^  :相同为0，不同为1.
 * 左移 : 1 << n 相当于 "1 乘以 2 的 n 次方".
 * 右移 : 1 >> n 相当于 "1 除以 2 的 n 次方".
 */
public class PrintIntInBin {
    public static void printIntInBin(int value) {
        /**
         * 一. num 的 二进制形式:
         * 00000000000000000000000000001000
         -----------------------------------
         *
         * 二. 1 << i, 1 左移31 位, 就是 1 * 2的31次方.
         * 00000000000000000000000000000001
         -----------------------------------
         *
         * 三. Integer.MAX_VALUE, 即 有符号整数 (1 * 2^31) -1 是
         * 01111111111111111111111111111111
         -----------------------------------
         *
         * 四. 所以 1 * 2^31 是
         * 10000000000000000000000000000000
         -----------------------------------
         *
         * 五.(1) 当 num 是 1 时 , 第一次 while 循环的情况 是
         * 00000000000000000000000000000001
         * &
         * 10000000000000000000000000000000 即 1 * 2^31
         * 结果是
         * 00000000000000000000000000000000 十进制输出是 0
         -----------------------------------
         *
         * 五.(2). 当 num 是 1 时 , 第二次 while 循环的情况 是
         * 00000000000000000000000000000001
         * &
         * 01000000000000000000000000000000 即 (1 * 2^30)
         * 结果是
         * 00000000000000000000000000000000 十进制输出是 0
         -----------------------------------
         * .                                十进制输出是 0
         * .                                十进制输出是 0
         * .                                十进制输出是 0
         -----------------------------------
         * 五.(31). 当 num 是 1 时 , 第二次 while 循环的情况 是
         * 00000000000000000000000000000001
         * &
         * 00000000000000000000000000000001 即 (1 * 2^0)
         * 结果是
         * 00000000000000000000000000000001 十进制输出是 1
         -----------------------------------

         * 六.所以 当 num 是 1 时 , 最终输出序列是
         * 00000000000000000000000000000001
         */

        for (int i = 31; i >=0 ; i--) { //int 类型 是 32 个二进制位表示的
            String r = (value & (1 << i)) == 0 ? "0" : "1" ; // << 左移几相当于 乘以 2 的几次方
            System.out.print(r);
        }

        /**
         * 补码之所以被设计成现在这个规则,主要是为了在 计算机中 用一套逻辑去实现 二进制的加减乘除
         * 补码的规则是什么的如下:
         * 负数的二进制存储方式是,chu去
         *
         */
    }

    public static void main(String[] args) {

        int num = 0;

        if (null != args && args.length>0) {
            num = Integer.parseInt(args[0]);
        }

        printIntInBin(num);
    }
}
